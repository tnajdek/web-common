@use "abstracts/defaults";
@use "abstracts/mixins/breakpoints";
@use "abstracts/mixins/selectors";
@use "abstracts/mixins/utilities";

.select-component {
	position: relative;
	flex: 1 1 0;
	min-width: 0; // Prevent overflow

	.select-control {
		display: flex;
		align-items: center;
		border-radius: defaults.$input-border-radius;
		transition: border defaults.$input-transition, box-shadow defaults.$input-transition;
		cursor: default;
		border: defaults.$input-border-width solid defaults.$input-border-color;
		background-color: defaults.$input-bg;
		padding: defaults.$input-btn-padding-y (defaults.$input-btn-padding-x - 4px) defaults.$input-btn-padding-y defaults.$input-btn-padding-x; // Todo: just default, handle padding with .form-control and modifier classes on .select.
		position: relative;

		@include selectors.state(".select-component.is-focused") {
			border: defaults.$input-border-width solid defaults.$input-focus-color;
			box-shadow: 0 0 0 2px defaults.$input-focus-color;
			outline: none;
		}
	}

	&.is-searchable.is-open {
		.select-control {
			cursor: text;
		}
	}

	.select-multi-value-wrapper {
		flex: 1 1 0;
		display: flex;
		align-items: center;
		min-width: 0; // Prevent overflow
	}

	.select-value-label {
		@include utilities.text-truncate;
	}

	.select-value {
		align-items: center;
		display: flex;
		inset: 0;
		padding: 0 defaults.$input-btn-padding-x;
		position: absolute;
	}

	&.has-value {
		.select-value {
			@include breakpoints.mouse-and-bp-up(md) {
				padding: defaults.$select-value-padding-desktop;
			}
		}
	}


	.select-input {
		outline: none;
		max-width: 100%;
		overflow: hidden;

		&:empty {
			&::before {
				content: "\00a0";
			}
		}

		> input {
			border: none;
			background: none;
			padding: 0;
			font-family: inherit;
			font-size: inherit;
			font-weight: inherit;
			outline: none;

			@include selectors.state(".select-component:not(.is-searchable)") {
				pointer-events: none;
			}
		}
	}

	.select-arrow-container {
		flex: 0 0 auto;
	}

	.select-arrow {
		display: block;
		width: defaults.$space-md;
		height: defaults.$space-md;
		background: defaults.$select-chevron-icon no-repeat 0 0;
	}

	.select-menu-outer {
		position: absolute;
		left: defaults.$input-border-width;
		top: calc(100% + #{defaults.$space-min + defaults.$input-border-width});
		right: defaults.$input-border-width;
		background-color: defaults.$menu-bg;
		border-radius: defaults.$menu-border-radius;
		z-index: defaults.$z-index-menu;
		padding: defaults.$space-min 0;
		box-shadow: defaults.$menu-box-shadow;
		background-clip: padding-box;
	}

	.select-menu {
		max-height: 10 * defaults.$line-height-large;
		overflow-y: auto;
	}

	.select-option,
	.select-noresults {
		padding: 0 defaults.$input-btn-padding-x;
		line-height: defaults.$line-height-large;
	}

	.select-option {
		cursor: pointer;
		color: defaults.$menu-color;

		// is-mouse and is-keyboard are mutex in .select-component
		&:hover {
			@include selectors.state(".select-component.is-mouse") {
				color: defaults.$menu-item-hover-color;
				background-color: defaults.$menu-item-hover-bg;
			}
		}

		&.is-focused:not(.is-selected) {
			@include selectors.state(".select-component.is-keyboard") {
				color: defaults.$menu-item-hover-color;
				background-color: defaults.$menu-item-hover-bg;
			}
		}

		&.is-selected {
			color: defaults.$menu-item-selected-color;
			background-color: defaults.$menu-item-selected-bg;
		}
	}

	.select-divider {
		border-top: defaults.$input-border-width solid defaults.$menu-devider;
	}

	.select-noresults {
		color: defaults.$menu-no-results-color;
		background-color: defaults.$menu-no-results-bg;
	}
}
